---
import { UI } from 'astrowind:config';
---

<script>
  // bootstrap and load petition_inner.js with correct URL arguments

  // document.currentScript polyfill by Adam Miller

  // MIT license

  (function (document) {
    var currentScript = 'currentScript';

    // If browser needs currentScript polyfill, add get currentScript() to the document object
    if (!(currentScript in document)) {
      Object.defineProperty(document, currentScript, {
        get: function () {
          // IE 8-10 support script readyState
          // IE 11+ support stack trace
          try {
            throw new Error();
          } catch (err) {
            // Find the second match for the "at" string to get file src url from stack.
            // Specifically works with the format of stack traces in IE.
            var i = 0,
              stackDetails = /.*at [^(]*\((.*):(.+):(.+)\)$/gi.exec(err.stack),
              scriptLocation = (stackDetails && stackDetails[1]) || false,
              line = (stackDetails && stackDetails[2]) || false,
              currentLocation = document.location.href.replace(document.location.hash, ''),
              pageSource,
              inlineScriptSourceRegExp,
              inlineScriptSource,
              scripts = document.getElementsByTagName('script'); // Live NodeList collection

            if (scriptLocation === currentLocation) {
              pageSource = document.documentElement.outerHTML;
              inlineScriptSourceRegExp = new RegExp(
                '(?:[^\\n]+?\\n){0,' + (line - 2) + '}[^<]*<script>([\\d\\D]*?)<\\/script>[\\d\\D]*',
                'i'
              );
              inlineScriptSource = pageSource.replace(inlineScriptSourceRegExp, '$1').trim();
            }

            for (; i < scripts.length; i++) {
              // If ready state is interactive, return the script tag
              if (scripts[i].readyState === 'interactive') {
                return scripts[i];
              }

              // If src matches, return the script tag
              if (scripts[i].src === scriptLocation) {
                return scripts[i];
              }

              // If inline source matches, return the script tag
              if (
                scriptLocation === currentLocation &&
                scripts[i].innerHTML &&
                scripts[i].innerHTML.trim() === inlineScriptSource
              ) {
                return scripts[i];
              }
            }

            // If no match, return null
            return null;
          }
        },
      });
    }
  })(document);

  (function (t) {
    var e = function () {
      try {
        return !!Symbol.iterator;
      } catch (e) {
        return false;
      }
    };
    var r = e();
    var n = function (t) {
      var e = {
        next: function () {
          var e = t.shift();
          return { done: e === void 0, value: e };
        },
      };
      if (r) {
        e[Symbol.iterator] = function () {
          return e;
        };
      }
      return e;
    };
    var i = function (e) {
      return encodeURIComponent(e).replace(/%20/g, '+');
    };
    var o = function (e) {
      return decodeURIComponent(String(e).replace(/\+/g, ' '));
    };
    var a = function () {
      var a = function (e) {
        Object.defineProperty(this, '_entries', { writable: true, value: {} });
        var t = typeof e;
        if (t === 'undefined') {
        } else if (t === 'string') {
          if (e !== '') {
            this._fromString(e);
          }
        } else if (e instanceof a) {
          var r = this;
          e.forEach(function (e, t) {
            r.append(t, e);
          });
        } else if (e !== null && t === 'object') {
          if (Object.prototype.toString.call(e) === '[object Array]') {
            for (var n = 0; n < e.length; n++) {
              var i = e[n];
              if (Object.prototype.toString.call(i) === '[object Array]' || i.length !== 2) {
                this.append(i[0], i[1]);
              } else {
                throw new TypeError('Expected [string, any] as entry at index ' + n + " of URLSearchParams's input");
              }
            }
          } else {
            for (var o in e) {
              if (e.hasOwnProperty(o)) {
                this.append(o, e[o]);
              }
            }
          }
        } else {
          throw new TypeError("Unsupported input's type for URLSearchParams");
        }
      };
      var e = a.prototype;
      e.append = function (e, t) {
        if (e in this._entries) {
          this._entries[e].push(String(t));
        } else {
          this._entries[e] = [String(t)];
        }
      };
      e.delete = function (e) {
        delete this._entries[e];
      };
      e.get = function (e) {
        return e in this._entries ? this._entries[e][0] : null;
      };
      e.getAll = function (e) {
        return e in this._entries ? this._entries[e].slice(0) : [];
      };
      e.has = function (e) {
        return e in this._entries;
      };
      e.set = function (e, t) {
        this._entries[e] = [String(t)];
      };
      e.forEach = function (e, t) {
        var r;
        for (var n in this._entries) {
          if (this._entries.hasOwnProperty(n)) {
            r = this._entries[n];
            for (var i = 0; i < r.length; i++) {
              e.call(t, r[i], n, this);
            }
          }
        }
      };
      e.keys = function () {
        var r = [];
        this.forEach(function (e, t) {
          r.push(t);
        });
        return n(r);
      };
      e.values = function () {
        var t = [];
        this.forEach(function (e) {
          t.push(e);
        });
        return n(t);
      };
      e.entries = function () {
        var r = [];
        this.forEach(function (e, t) {
          r.push([t, e]);
        });
        return n(r);
      };
      if (r) {
        e[Symbol.iterator] = e.entries;
      }
      e.toString = function () {
        var r = [];
        this.forEach(function (e, t) {
          r.push(i(t) + '=' + i(e));
        });
        return r.join('&');
      };
      t.URLSearchParams = a;
    };
    var s = function () {
      try {
        var e = t.URLSearchParams;
        return new e('?a=1').toString() === 'a=1' && typeof e.prototype.set === 'function';
      } catch (e) {
        return false;
      }
    };
    if (!s()) {
      a();
    }
    var c = t.URLSearchParams.prototype;
    if (typeof c.sort !== 'function') {
      c.sort = function () {
        var r = this;
        var n = [];
        this.forEach(function (e, t) {
          n.push([t, e]);
          if (!r._entries) {
            r.delete(t);
          }
        });
        n.sort(function (e, t) {
          if (e[0] < t[0]) {
            return -1;
          } else if (e[0] > t[0]) {
            return +1;
          } else {
            return 0;
          }
        });
        if (r._entries) {
          r._entries = {};
        }
        for (var e = 0; e < n.length; e++) {
          this.append(n[e][0], n[e][1]);
        }
      };
    }
    if (typeof c._fromString !== 'function') {
      Object.defineProperty(c, '_fromString', {
        enumerable: false,
        configurable: false,
        writable: false,
        value: function (e) {
          if (this._entries) {
            this._entries = {};
          } else {
            var r = [];
            this.forEach(function (e, t) {
              r.push(t);
            });
            for (var t = 0; t < r.length; t++) {
              this.delete(r[t]);
            }
          }
          e = e.replace(/^\?/, '');
          var n = e.split('&');
          var i;
          for (var t = 0; t < n.length; t++) {
            i = n[t].split('=');
            this.append(o(i[0]), i.length > 1 ? o(i[1]) : '');
          }
        },
      });
    }
  })(
    typeof global !== 'undefined'
      ? global
      : typeof window !== 'undefined'
        ? window
        : typeof self !== 'undefined'
          ? self
          : this
  );
  (function (u) {
    var e = function () {
      try {
        var e = new u.URL('b', 'http://a');
        e.pathname = 'c d';
        return e.href === 'http://a/c%20d' && e.searchParams;
      } catch (e) {
        return false;
      }
    };
    var t = function () {
      var t = u.URL;
      var e = function (e, t) {
        if (typeof e !== 'string') e = String(e);
        var r = document,
          n;
        if (t && (u.location === void 0 || t !== u.location.href)) {
          r = document.implementation.createHTMLDocument('');
          n = r.createElement('base');
          n.href = t;
          r.head.appendChild(n);
          try {
            if (n.href.indexOf(t) !== 0) throw new Error(n.href);
          } catch (e) {
            throw new Error('URL unable to set base ' + t + ' due to ' + e);
          }
        }
        var i = r.createElement('a');
        i.href = e;
        if (n) {
          r.body.appendChild(i);
          i.href = i.href;
        }
        var o = r.createElement('input');
        o.type = 'url';
        o.value = e;
        if (i.protocol === ':' || !/:/.test(i.href) || (!o.checkValidity() && !t)) {
          throw new TypeError('Invalid URL');
        }
        Object.defineProperty(this, '_anchorElement', { value: i });
        var a = new u.URLSearchParams(this.search);
        var s = true;
        var c = true;
        var f = this;
        ['append', 'delete', 'set'].forEach(function (e) {
          var t = a[e];
          a[e] = function () {
            t.apply(a, arguments);
            if (s) {
              c = false;
              f.search = a.toString();
              c = true;
            }
          };
        });
        Object.defineProperty(this, 'searchParams', { value: a, enumerable: true });
        var h = void 0;
        Object.defineProperty(this, '_updateSearchParams', {
          enumerable: false,
          configurable: false,
          writable: false,
          value: function () {
            if (this.search !== h) {
              h = this.search;
              if (c) {
                s = false;
                this.searchParams._fromString(this.search);
                s = true;
              }
            }
          },
        });
      };
      var r = e.prototype;
      var n = function (t) {
        Object.defineProperty(r, t, {
          get: function () {
            return this._anchorElement[t];
          },
          set: function (e) {
            this._anchorElement[t] = e;
          },
          enumerable: true,
        });
      };
      ['hash', 'host', 'hostname', 'port', 'protocol'].forEach(function (e) {
        n(e);
      });
      Object.defineProperty(r, 'search', {
        get: function () {
          return this._anchorElement['search'];
        },
        set: function (e) {
          this._anchorElement['search'] = e;
          this._updateSearchParams();
        },
        enumerable: true,
      });
      Object.defineProperties(r, {
        toString: {
          get: function () {
            var e = this;
            return function () {
              return e.href;
            };
          },
        },
        href: {
          get: function () {
            return this._anchorElement.href.replace(/\?$/, '');
          },
          set: function (e) {
            this._anchorElement.href = e;
            this._updateSearchParams();
          },
          enumerable: true,
        },
        pathname: {
          get: function () {
            return this._anchorElement.pathname.replace(/(^\/?)/, '/');
          },
          set: function (e) {
            this._anchorElement.pathname = e;
          },
          enumerable: true,
        },
        origin: {
          get: function () {
            var e = { 'http:': 80, 'https:': 443, 'ftp:': 21 }[this._anchorElement.protocol];
            var t = this._anchorElement.port != e && this._anchorElement.port !== '';
            return (
              this._anchorElement.protocol +
              '//' +
              this._anchorElement.hostname +
              (t ? ':' + this._anchorElement.port : '')
            );
          },
          enumerable: true,
        },
        password: {
          get: function () {
            return '';
          },
          set: function (e) {},
          enumerable: true,
        },
        username: {
          get: function () {
            return '';
          },
          set: function (e) {},
          enumerable: true,
        },
      });
      e.createObjectURL = function (e) {
        return t.createObjectURL.apply(t, arguments);
      };
      e.revokeObjectURL = function (e) {
        return t.revokeObjectURL.apply(t, arguments);
      };
      u.URL = e;
    };
    if (!e()) {
      t();
    }
    if (u.location !== void 0 && !('origin' in u.location)) {
      var r = function () {
        return u.location.protocol + '//' + u.location.hostname + (u.location.port ? ':' + u.location.port : '');
      };
      try {
        Object.defineProperty(u.location, 'origin', { get: r, enumerable: true });
      } catch (e) {
        setInterval(function () {
          u.location.origin = r();
        }, 100);
      }
    }
  })(
    typeof global !== 'undefined'
      ? global
      : typeof window !== 'undefined'
        ? window
        : typeof self !== 'undefined'
          ? self
          : this
  );

  if (document.currentScript) {
    var script_url = new URL(document.currentScript.src);
    var script_url_params = script_url.searchParams;
    var script_url_no_params = script_url.origin + script_url.pathname;

    var window_url = new URL(window.location.href);
    var window_url_params = window_url.searchParams;

    window_url_params.forEach(function (value, key) {
      if (script_url_params.get(key)) {
        script_url_params.set(key, value);
      } else {
        script_url_params.append(key, value);
      }
    });

    script_url_params.append('js_inner', 'true');
  } else {
    var script_url_params = 'format=js&source=widget&style=full&js_inner=true';
  }

  var script = document.createElement('script');
  // script.src = script_url.origin + '/widgets/v5/petition/test-473?' + script_url_params.toString();
  script.src = 'https://actionnetwork.org/widgets/v5/petition/test-473?' + script_url_params.toString();
  if (document.currentScript) {
    document.currentScript.insertAdjacentElement('afterend', script);
  } else {
    document.querySelector('.embed_replace').insertAdjacentElement('afterend', script);
  }
</script>
<script is:inline define:vars={{ defaultTheme: UI.theme }}>
  if (window.basic_script) {
    return;
  }

  window.basic_script = true;

  function applyTheme(theme) {
    if (theme === 'dark') {
      document.documentElement.classList.add('dark');
    } else {
      document.documentElement.classList.remove('dark');
    }
  }

  const initTheme = function () {
    if ((defaultTheme && defaultTheme.endsWith(':only')) || (!localStorage.theme && defaultTheme !== 'system')) {
      applyTheme(defaultTheme.replace(':only', ''));
    } else if (
      localStorage.theme === 'dark' ||
      (!('theme' in localStorage) && window.matchMedia('(prefers-color-scheme: dark)').matches)
    ) {
      applyTheme('dark');
    } else {
      applyTheme('light');
    }
  };
  initTheme();

  function attachEvent(selector, event, fn) {
    const matches = typeof selector === 'string' ? document.querySelectorAll(selector) : selector;
    if (matches && matches.length) {
      matches.forEach((elem) => {
        elem.addEventListener(event, (e) => fn(e, elem), false);
      });
    }
  }

  const onLoad = function () {
    let lastKnownScrollPosition = window.scrollY;
    let ticking = true;

    attachEvent('#header nav', 'click', function () {
      document.querySelector('[data-aw-toggle-menu]')?.classList.remove('expanded');
      document.body.classList.remove('overflow-hidden');
      document.getElementById('header')?.classList.remove('h-screen');
      document.getElementById('header')?.classList.remove('expanded');
      document.getElementById('header')?.classList.remove('bg-page');
      document.querySelector('#header nav')?.classList.add('hidden');
      document.querySelector('#header > div > div:last-child')?.classList.add('hidden');
    });

    attachEvent('[data-aw-toggle-menu]', 'click', function (_, elem) {
      elem.classList.toggle('expanded');
      document.body.classList.toggle('overflow-hidden');
      document.getElementById('header')?.classList.toggle('h-screen');
      document.getElementById('header')?.classList.toggle('expanded');
      document.getElementById('header')?.classList.toggle('bg-page');
      document.querySelector('#header nav')?.classList.toggle('hidden');
      document.querySelector('#header > div > div:last-child')?.classList.toggle('hidden');
    });

    attachEvent('[data-aw-toggle-color-scheme]', 'click', function () {
      if (defaultTheme.endsWith(':only')) {
        return;
      }
      document.documentElement.classList.toggle('dark');
      localStorage.theme = document.documentElement.classList.contains('dark') ? 'dark' : 'light';
    });

    attachEvent('[data-aw-social-share]', 'click', function (_, elem) {
      const network = elem.getAttribute('data-aw-social-share');
      const url = encodeURIComponent(elem.getAttribute('data-aw-url'));
      const text = encodeURIComponent(elem.getAttribute('data-aw-text'));

      let href;
      switch (network) {
        case 'facebook':
          href = `https://www.facebook.com/sharer.php?u=${url}`;
          break;
        case 'twitter':
          href = `https://twitter.com/intent/tweet?url=${url}&text=${text}`;
          break;
        case 'linkedin':
          href = `https://www.linkedin.com/shareArticle?mini=true&url=${url}&title=${text}`;
          break;
        case 'whatsapp':
          href = `https://wa.me/?text=${text}%20${url}`;
          break;
        case 'mail':
          href = `mailto:?subject=%22${text}%22&body=${text}%20${url}`;
          break;

        default:
          return;
      }

      const newlink = document.createElement('a');
      newlink.target = '_blank';
      newlink.href = href;
      newlink.click();
    });

    const screenSize = window.matchMedia('(max-width: 767px)');
    screenSize.addEventListener('change', function () {
      document.querySelector('[data-aw-toggle-menu]')?.classList.remove('expanded');
      document.body.classList.remove('overflow-hidden');
      document.getElementById('header')?.classList.remove('h-screen');
      document.getElementById('header')?.classList.remove('expanded');
      document.getElementById('header')?.classList.remove('bg-page');
      document.querySelector('#header nav')?.classList.add('hidden');
      document.querySelector('#header > div > div:last-child')?.classList.add('hidden');
    });

    function applyHeaderStylesOnScroll() {
      const header = document.querySelector('#header[data-aw-sticky-header]');
      if (!header) return;
      if (lastKnownScrollPosition > 60 && !header.classList.contains('scroll')) {
        header.classList.add('scroll');
      } else if (lastKnownScrollPosition <= 60 && header.classList.contains('scroll')) {
        header.classList.remove('scroll');
      }
      ticking = false;
    }
    applyHeaderStylesOnScroll();

    attachEvent([document], 'scroll', function () {
      lastKnownScrollPosition = window.scrollY;

      if (!ticking) {
        window.requestAnimationFrame(() => {
          applyHeaderStylesOnScroll();
        });
        ticking = true;
      }
    });
  };
  const onPageShow = function () {
    document.documentElement.classList.add('motion-safe:scroll-smooth');
    const elem = document.querySelector('[data-aw-toggle-menu]');
    if (elem) {
      elem.classList.remove('expanded');
    }
    document.body.classList.remove('overflow-hidden');
    document.getElementById('header')?.classList.remove('h-screen');
    document.getElementById('header')?.classList.remove('expanded');
    document.querySelector('#header nav')?.classList.add('hidden');
  };

  window.onload = onLoad;
  window.onpageshow = onPageShow;

  document.addEventListener('astro:after-swap', () => {
    initTheme();
    onLoad();
    onPageShow();
  });
</script>

<script is:inline>
  /* Inspired by: https://github.com/heidkaemper/tailwindcss-intersect */
  const Observer = {
    observer: null,
    delayBetweenAnimations: 100,
    animationCounter: 0,

    start() {
      const selectors = [
        '[class*=" intersect:"]',
        '[class*=":intersect:"]',
        '[class^="intersect:"]',
        '[class="intersect"]',
        '[class*=" intersect "]',
        '[class^="intersect "]',
        '[class$=" intersect"]',
      ];

      const elements = Array.from(document.querySelectorAll(selectors.join(',')));

      const getThreshold = (element) => {
        if (element.classList.contains('intersect-full')) return 0.99;
        if (element.classList.contains('intersect-half')) return 0.5;
        if (element.classList.contains('intersect-quarter')) return 0.25;
        return 0;
      };

      elements.forEach((el) => {
        el.setAttribute('no-intersect', '');
        el._intersectionThreshold = getThreshold(el);
      });

      const callback = (entries) => {
        entries.forEach((entry) => {
          requestAnimationFrame(() => {
            const target = entry.target;
            const intersectionRatio = entry.intersectionRatio;
            const threshold = target._intersectionThreshold;

            if (target.classList.contains('intersect-no-queue')) {
              if (entry.isIntersecting) {
                target.removeAttribute('no-intersect');
                if (target.classList.contains('intersect-once')) {
                  this.observer.unobserve(target);
                }
              } else {
                target.setAttribute('no-intersect', '');
              }
              return;
            }

            if (intersectionRatio >= threshold) {
              if (!target.hasAttribute('data-animated')) {
                target.removeAttribute('no-intersect');
                target.setAttribute('data-animated', 'true');

                const delay = this.animationCounter * this.delayBetweenAnimations;
                this.animationCounter++;

                target.style.transitionDelay = `${delay}ms`;
                target.style.animationDelay = `${delay}ms`;

                if (target.classList.contains('intersect-once')) {
                  this.observer.unobserve(target);
                }
              }
            } else {
              target.setAttribute('no-intersect', '');
              target.removeAttribute('data-animated');
              target.style.transitionDelay = '';
              target.style.animationDelay = '';

              this.animationCounter = 0;
            }
          });
        });
      };

      this.observer = new IntersectionObserver(callback.bind(this), { threshold: [0, 0.25, 0.5, 0.99] });

      elements.forEach((el) => {
        this.observer.observe(el);
      });
    },
  };

  Observer.start();

  document.addEventListener('astro:after-swap', () => {
    Observer.start();
  });
</script>
